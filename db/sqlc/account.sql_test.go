// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: account.sql

package db

import (
	"context"
	"reflect"
	"testing"

	//"github.com/stretchr/testify/mock"
	"github.com/stretchr/testify/require"
)

func TestQueries_ListAccount(t *testing.T) {
	type fields struct {
		db DBTX
	}
	type args struct {
		ctx context.Context
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		want    []Account
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			q := &Queries{
				db: tt.fields.db,
			}
			got, err := q.ListAccount(tt.args.ctx)
			if (err != nil) != tt.wantErr {
				t.Errorf("Queries.ListAccount() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Queries.ListAccount() = %v, want %v", got, tt.want)
			}
		})
	}
}

// func TestQueries_CreateAccount(t *testing.T) {
// 	type fields struct {
// 		db DBTX
// 	}
// 	type args struct {
// 		ctx context.Context
// 		arg CreateAccountParams
// 	}
// 	tests := []struct {
// 		name    string
// 		fields  fields
// 		args    args
// 		want    Account
// 		wantErr bool
// 	}{
// 		{
// 			name: "test create account",
// 			fields: fields(*testQueries),
// 			args : args{
// 				ctx: context.Background(),
// 				arg: CreateAccountParams{
// 					Owner: "tom",
// 					Balance: 100,
// 					Currency: "USD",
// 				},
// 			},
// 			want: Account{
// 				//ID: mock.Anything(),
// 				Owner:"tom",
// 				Balance: 100,
// 				Currency: "USD",
// 				//CreatedAt: mock.Any(),
// 			},
// 			wantErr: false,

// 		},
// 	}
// 	for _, tt := range tests {
// 		t.Run(tt.name, func(t *testing.T) {
// 			q := &Queries{
// 				db: tt.fields.db,
// 			}
// 			got, err := q.CreateAccount(tt.args.ctx, tt.args.arg)
// 			if (err != nil) != tt.wantErr {
// 				t.Errorf("Queries.CreateAccount() error = %v, wantErr %v", err, tt.wantErr)
// 				return
// 			}
// 			if !reflect.DeepEqual(got, tt.want) {
// 				t.Errorf("Queries.CreateAccount() = %v, want %v", got, tt.want)
// 			}
// 		})
// 	}
// }
func TestCreateAccount(t *testing.T){
	arg := CreateAccountParams{
		Owner: "tom",
		Balance: 100,
		Currency: "USD",
	}
	account, err := testQueries.CreateAccount(context.Background(), arg)
	require.NoError(t, err)
	require.NotEmpty(t,account)

	require.Equal(t, account.Owner , "tom")
	require.Equal(t, account.Balance , int64(100))
	require.Equal(t, account.Currency , "USD")

	require.NotZero(t, account.ID)
	require.NotZero(t,account.CreatedAt)
}
